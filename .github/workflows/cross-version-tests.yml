name: Cross version tests
run-name: ${{ inputs.uuid }}

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review
  workflow_dispatch:
    inputs:
      repository:
        description: >
          [Optional] Repository name with owner. For example, mlflow/mlflow.
           Defaults to the repository that triggered a workflow.
        required: false
        default: ""
      ref:
        description: >
          [Optional] The branch, tag or SHA to checkout. When checking out the repository that
           triggered a workflow, this defaults to the reference or SHA for that event. Otherwise,
           uses the default branch.
        required: false
        default: ""
      flavors:
        description: "[Optional] Comma-separated string specifying which flavors to test (e.g. 'sklearn, xgboost'). If unspecified, all flavors are tested."
        required: false
        default: ""
      versions:
        description: "[Optional] Comma-separated string specifying which versions to test (e.g. '1.2.3, 4.5.6'). If unspecified, all versions are tested."
        required: false
        default: ""
      uuid:
        description: "[Optional] A unique identifier for this run."
        required: false
        default: ""
  schedule:
    # Run this workflow daily at 13:00 UTC
    - cron: "0 13 * * *"

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

env:
  MLFLOW_HOME: ${{ github.workspace }}
  PIP_EXTRA_INDEX_URL: https://download.pytorch.org/whl/cpu
  PIP_CONSTRAINT: ${{ github.workspace }}/requirements/constraints.txt

jobs:
  set-matrix:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'schedule' && github.repository == 'mlflow/dev') || (github.event_name == 'pull_request' && github.event.pull_request.draft == false)
    permissions:
      issues: read # listLabelsOnIssue
    outputs:
      matrix1: ${{ steps.set-matrix.outputs.matrix1 }}
      matrix2: ${{ steps.set-matrix.outputs.matrix2 }}
      is_matrix1_empty: ${{ steps.set-matrix.outputs.is_matrix1_empty }}
      is_matrix2_empty: ${{ steps.set-matrix.outputs.is_matrix2_empty }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: ${{ github.event_name == 'schedule' && 'mlflow/mlflow' || github.event.inputs.repository }}
          ref: ${{ github.event.inputs.ref }}
      - uses: ./.github/actions/untracked
      - uses: ./.github/actions/setup-python
      - name: Install dependencies
        run: |
          pip install -r dev/requirements.txt
          pip install pytest pytest-cov
      - name: Check labels
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        id: check-labels
        with:
          script: |
            if (context.eventName !== "pull_request") {
              return {
                enable_dev_tests: true,
                only_latest: false,
              };
            }
            const labels = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const labelNames = labels.data.map(({ name }) => name);
            return {
              enable_dev_tests: labelNames.includes("enable-dev-tests"),
              only_latest: labelNames.includes("only-latest"),
            };
      - name: Test set_matrix.py
        run: |
          python -m pytest --noconftest dev/tests
      - id: set-matrix
        name: Set matrix
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          EVENT_NAME="${{ github.event_name }}"
          if [ "$EVENT_NAME" = "pull_request" ]; then
            REPO="${{ github.repository }}"
            PR_NUMBER="${{ github.event.pull_request.number }}"
            BASE_REF="${{ github.base_ref }}"
            REF_VERSIONS_YAML="https://raw.githubusercontent.com/$REPO/$BASE_REF/mlflow/ml-package-versions.yml"
            CHANGED_FILES=$(python dev/list_changed_files.py --repository $REPO --pr-num $PR_NUMBER | grep -v '^mlflow/server/js' || true)
            ENABLE_DEV_TESTS="${{ fromJson(steps.check-labels.outputs.result).enable_dev_tests }}"
            NO_DEV_FLAG=$([ "$ENABLE_DEV_TESTS" == "true" ] && echo "" || echo "--no-dev")
            ONLY_LATEST="${{ fromJson(steps.check-labels.outputs.result).only_latest }}"
            ONLY_LATEST_FLAG=$([ "$ONLY_LATEST" == "true" ] && echo "--only-latest" || echo "")
            python dev/set_matrix.py --ref-versions-yaml $REF_VERSIONS_YAML --changed-files "$CHANGED_FILES" $NO_DEV_FLAG $ONLY_LATEST_FLAG
          elif [ "$EVENT_NAME" = "workflow_dispatch" ]; then
            python dev/set_matrix.py --flavors "${{ github.event.inputs.flavors }}" --versions "${{ github.event.inputs.versions }}"
          else
            python dev/set_matrix.py
          fi

  test1:
    needs: set-matrix
    if: ${{ needs.set-matrix.outputs.is_matrix1_empty == 'false' }}
    runs-on: ${{ matrix.runs_on }}
    timeout-minutes: 120
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.set-matrix.outputs.matrix1) }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: ${{ github.event_name == 'schedule' && 'mlflow/mlflow' || github.event.inputs.repository }}
          ref: ${{ github.event.inputs.ref }}
      - uses: ./.github/actions/free-disk-space
        if: matrix.free_disk_space
      - uses: ./.github/actions/setup-python
        with:
          python-version: ${{ matrix.python }}
      - uses: ./.github/actions/setup-pyenv
      - uses: ./.github/actions/setup-java
        with:
          java-version: ${{ matrix.java }}
      - name: Remove constraints
        run: |
          # Remove any constraints for the current package to prevent installation conflicts
          sed -i '/^${{ matrix.package }}/d' requirements/constraints.txt

          if ! git diff --exit-code requirements/constraints.txt; then
            git diff
            git config user.name 'mlflow-app[bot]'
            git config user.email 'mlflow-app[bot]@users.noreply.github.com'
            git add requirements/constraints.txt
            git commit -m "Remove constraints for testing"
          fi
      - name: Install mlflow & test dependencies
        run: |
          pip install -U pip wheel setuptools
          # For tracing SDK test, install the tracing package from the local path and minimal test dependencies
          if [[ "${{ matrix.category }}" == "tracing-sdk" ]]; then
            pip install libs/tracing
            pip install pytest pytest-asyncio pytest-cov
          # Other two categories of tests (model/autologging)
          else
            pip install .[extras]
            pip install -r requirements/test-requirements.txt
          fi
      - name: Install ${{ matrix.package }} ${{ matrix.version }}
        run: |
          ${{ matrix.install }}
      - uses: ./.github/actions/show-versions
      - uses: ./.github/actions/pipdeptree
      - name: Pre-test
        if: matrix.pre_test
        run: |
          ${{ matrix.pre_test }}
      - name: Run tests
        env:
          MLFLOW_CONDA_HOME: /usr/share/miniconda
          SPARK_LOCAL_IP: localhost
          JOHNSNOWLABS_LICENSE_JSON: ${{ secrets.JOHNSNOWLABS_LICENSE_JSON }}
          HF_HUB_ENABLE_HF_TRANSFER: 1
        run: |
          ${{ matrix.run }} | tee test1.log

      - name: Print test1.log
        run: |
          cat test1.log

      - uses: astral-sh/setup-uv@f0ec1fc3b38f5e7cd731bb6ce540c5af426746bb # v6.1.0
        with:
          version: 0.7.8
      - name: Install codex
        run: |
          curl -L -o codex.tar.gz https://github.com/openai/codex/releases/download/rust-v0.25.0/codex-x86_64-unknown-linux-musl.tar.gz
          tar -xzf codex.tar.gz
          mv codex-x86_64-unknown-linux-musl codex
          chmod +x codex
          ./codex --version
      - name: Set up config
        run: |
          # https://github.com/openai/codex/blob/main/docs/config.md
          mkdir -p ~/.codex
          cat <<'EOF' > ~/.codex/config.toml
          # TODO: Use github models if gpt-5 supports higher input/output token limits
          # https://github.com/marketplace/models/azure-openai/gpt-5
          # model = "openai/gpt-5"
          # model_provider = "github-models"
          model_verbosity = "high"
          approval_policy = "never"
          sandbox_mode = "workspace-write"
          tools.web_search = true

          [sandbox_workspace_write]
          network_access = true

          [model_providers.github-models]
          # https://docs.github.com/en/github-models/use-github-models/prototyping-with-ai-models#rate-limits
          name = "GitHub Models"
          base_url = "https://models.github.ai/inference"
          env_key = "GITHUB_TOKEN"
          wire_api = "chat"

          [mcp_servers.github]
          # https://github.com/github/github-mcp-server
          command = "uv"
          args = [
            "run",
            "--no-project",
            "dev/mcps/review.py"
          ]
          env = { "GITHUB_TOKEN" = "${{ secrets.GITHUB_TOKEN }}" }
          EOF
      - name: Prompt
        run: |
          cat <<'EOF' > AGENTS.md
          You are a professional software engineer. You will be given log of failed MLflow cross version test (Github action) for a particular integrated library and version. Your job is to suggest a root cause by researching the
          recent updates of the library.

          ### What is MLflow?

          MLflow is an open-source platform for managing the end-to-end machine learning lifecycle. It provides tools for:

          - Experiment tracking
          - Model versioning and deployment
          - LLM observability and tracing
          - Model evaluation
          - Prompt management

          ### What is cross version test?

          Cross version tests is a set of CI jobs running against the latest MLflow's master branch to test integration with various libraries, such as scikit-learn, LangChain, DSPy, etc.

          MLflow runs tests with the ML libraries listed in mlflow/ml-package-versions.yml

          Notable thing is MLflow runs test for versions of each library, from 'minimum' version to """latest""" version available on PyPI, not 'maximum' version declared in the file. This is because we only update this file per minor release and new versions can be available before that. MLflow must be compatible with whatever latest version.

          ### Your Workflow

          You are at a workspace directory with the following files:
           - Cloned MLflow repository
           - test1.log: The full log of failed job
           - versions.txt: The dependency versions used in the failed job.
          Investigate on the root cause. See the changelog of that particular
          version to find relevant changes. If it is not found, you can analyze
          commit history as well. Sometimes the change is not in the integrated
          library itself, but a dependency of it.

          Once you find the root cause, write down a short summary of the root cause
          in `root_cause.txt`.

          EOF

      - name: Run codex
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Use timeout in case codex hangs
          timeout 3m ./codex exec --skip-git-repo-check "Can you review $PR_URL?" || true

      - name: Suggest root cause
        run: |
          cat root_cause.txt

  # test2:
  #   needs: set-matrix
  #   if: ${{ needs.set-matrix.outputs.is_matrix2_empty == 'false' }}
  #   runs-on: ${{ matrix.runs_on }}
  #   timeout-minutes: 120
  #   permissions:
  #     contents: read
  #   strategy:
  #     fail-fast: false
  #     matrix: ${{ fromJson(needs.set-matrix.outputs.matrix2) }}
  #   steps:
  #     - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
  #       with:
  #         repository: ${{ github.event_name == 'schedule' && 'mlflow/mlflow' || github.event.inputs.repository }}
  #         ref: ${{ github.event.inputs.ref }}
  #     - uses: ./.github/actions/free-disk-space
  #       if: matrix.free_disk_space
  #     - uses: ./.github/actions/setup-python
  #       with:
  #         python-version: ${{ matrix.python }}
  #     - uses: ./.github/actions/setup-pyenv
  #     - uses: ./.github/actions/setup-java
  #       with:
  #         java-version: ${{ matrix.java }}
  #     - name: Remove constraints
  #       run: |
  #         # Remove any constraints for the current package to prevent installation conflicts
  #         sed -i '/^${{ matrix.package }}/d' requirements/constraints.txt

  #         if ! git diff --exit-code requirements/constraints.txt; then
  #           git diff
  #           git config user.name 'mlflow-app[bot]'
  #           git config user.email 'mlflow-app[bot]@users.noreply.github.com'
  #           git add requirements/constraints.txt
  #           git commit -m "Remove constraints for testing"
  #         fi
  #     - name: Install mlflow & test dependencies
  #       run: |
  #         pip install -U pip wheel setuptools
  #         # For tracing SDK test, install the tracing package from the local path and minimal test dependencies
  #         if [[ "${{ matrix.category }}" == "tracing-sdk" ]]; then
  #           pip install libs/tracing
  #           pip install pytest pytest-asyncio pytest-cov
  #         # Other two categories of tests (model/autologging)
  #         else
  #           pip install .[extras]
  #           pip install -r requirements/test-requirements.txt
  #         fi
  #     - name: Install ${{ matrix.package }} ${{ matrix.version }}
  #       run: |
  #         ${{ matrix.install }}
  #     - uses: ./.github/actions/show-versions
  #     - uses: ./.github/actions/pipdeptree
  #     - name: Pre-test
  #       if: matrix.pre_test
  #       run: |
  #         ${{ matrix.pre_test }}
  #     - name: Run tests
  #       env:
  #         MLFLOW_CONDA_HOME: /usr/share/miniconda
  #         SPARK_LOCAL_IP: localhost
  #         JOHNSNOWLABS_LICENSE_JSON: ${{ secrets.JOHNSNOWLABS_LICENSE_JSON }}
  #         HF_HUB_ENABLE_HF_TRANSFER: 1
  #       run: |
  #         ${{ matrix.run }}
